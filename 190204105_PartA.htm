
<html>
<title>190204105 Assignment 3 PartA </title>
<canvas id="webglcanvas" width="500" height="500"></canvas>

<script>

    var canvas = document.getElementById("webglcanvas"); 
    var  gl = canvas.getContext("webgl");
	 var scale = 1.0;
    var vertexShaderSource =
       `attribute vec3 a_coords;
	    attribute vec3 a_colors;
	 	uniform mat4 u_RotY;
		uniform mat4 u_RotX;
		varying vec3 v_color;
		uniform float u_Scale;
        
		void main() {
            gl_Position = u_RotX*u_RotY*vec4(a_coords*u_Scale, 1.0);

			v_color = a_colors;
        }`;

	var fragmentShaderSource =
       `precision mediump float;
        varying vec3 v_color;
		
        void main() {
            gl_FragColor = vec4(v_color, 1.0);
        }`;

    var vsh = gl.createShader( gl.VERTEX_SHADER );
    gl.shaderSource( vsh, vertexShaderSource );
    gl.compileShader( vsh );
	
    var fsh = gl.createShader( gl.FRAGMENT_SHADER );
    gl.shaderSource( fsh, fragmentShaderSource );
    gl.compileShader( fsh );
    
    var prog = gl.createProgram(); 
    
    gl.attachShader( prog, vsh ); 
    gl.attachShader( prog, fsh );
    gl.linkProgram( prog ); 
    gl.useProgram(prog); 

	var thetaY = 45;
	var thetaX = 45;
	
	function print(){
	 var a_coords_location = gl.getAttribLocation(prog, "a_coords");

    var coords = new Float32Array( [
	//front
-0.2, 0.4, -0.4,   0.2, 0.4, -0.4,    -0.4, 0.0, -0.4,    
0.2, 0.4, -0.4,     -0.2, -0.4, -0.4,    -0.4, 0.0, -0.4,    
0.2, 0.4, -0.4,   -0.2, -0.4, -0.4,     0.2, -0.4, -0.4,  
0.2, 0.4, -0.4,   0.2, -0.4, -0.4,   0.4, 0.0, -0.4,


//back
-0.2, 0.4, 0.4, 	0.2, 0.4, 0.4, 	-0.4, 0.0, 0.4,
0.2, 0.4, 0.4, 	   -0.2, -0.4, 0.4,   -0.4, 0.0, 0.4,
0.2, 0.4, 0.4,    -0.2, -0.4, 0.4,   0.2, -0.4, 0.4,
0.2, 0.4, 0.4,      0.2, -0.4, 0.4,   0.4, 0.0, 0.4,
//bottom
-0.2, -0.4, -0.4,    0.2, -0.4, -0.4,   -0.2, -0.4, 0.4,
0.2, -0.4, 0.4,     -0.2, -0.4, 0.4,   0.2, -0.4, -0.4,
//right
0.2, -0.4, -0.4,     0.4, 0.0, -0.4,   0.2, -0.4, 0.4,
0.2, -0.4, 0.4,      0.4, 0.0, 0.4,    0.4, 0.0, -0.4,
//left

-0.2, -0.4, -0.4,    -0.4, 0.0, -0.4,   -0.2,-0.4,0.4,
-0.2, -0.4, -0.4,    -0.4, 0.0, 0.4,    -0.4, 0.0, -0.4,

//top
-0.2, 0.4, -0.4,     0.2,0.4,-0.4,     -0.2,0.4,0.4,
-0.2, 0.4, 0.4,      0.2, 0.4, 0.4,    0.2, 0.4, -0.4,

//top-Left
-0.4, 0.0, -0.4,   -0.2, 0.4, -0.4,     -0.4, 0.0 , 0.4,
-0.4, 0.0, 0.4,     -0.2, 0.4, 0.4,   -0.2, 0.4, -0.4,

//top-Right
0.2, 0.4, -0.4,    0.4, 0.0, -0.4,     0.2, 0.4, 0.4,
0.2, 0.4, 0.4,     0.4, 0.0, 0.4,      0.4, 0.0, -0.4,


									] );
	
    var a_coords_buffer = gl.createBuffer(); 
    gl.bindBuffer(gl.ARRAY_BUFFER, a_coords_buffer); 
    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW); 
    gl.vertexAttribPointer(a_coords_location, 3, gl.FLOAT, false, 0, 0); 
    gl.enableVertexAttribArray(a_coords_location);
	
	
	var a_colors_location = gl.getAttribLocation(prog, "a_colors");
    var colors = new Float32Array( [
1, 0, 0, 1,
1, 0, 0, 1,
1, 0, 0, 1, 
1, 0, 0, 1, 
1, 0, 0, 1,
1, 0, 0, 1,
1, 0, 0, 1, 
1, 0, 0, 1, 
1, 0, 0, 1, 
1, 0, 0, 1,
1, 0, 0, 1,
1, 0, 0, 1,


0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 1, 1,


1, 0, 0.2, 1, 
1, 0, 0.2, 1, 
1, 0, 0.2, 1,
1, 0, 0.2, 1,
1, 0, 0.2, 1,
1, 0, 0.2, 1,

0.1, 0.5, 0.5, 1,
0.1, 0.5, 0.5, 1,
0.1, 0.5, 0.5, 1,
0.1, 0.5, 0.5, 1,
0.1, 0.5, 0.5, 1,
0.1, 0.5, 0.5, 1,

1, 1, 0.5, 1,
1, 1, 0.5, 1,
1, 1, 0.5, 1,
1, 1, 0.5, 1, 
1, 1, 0.5, 1,
1, 1, 0.5, 1,

0.1, 0.1, 0.5, 1,
0.1, 0.1, 0.5, 1,
0.1, 0.1, 0.5, 1,
0.1, 0.1, 0.5, 1,
0.1, 0.1, 0.5, 1,
0.1, 0.1, 0.5, 1,

0.1, 0.4, 0.5, 1,
0.1, 0.4, 0.5, 1,
0.1, 0.4, 0.5, 1,
0.1, 0.4, 0.5, 1, 
0.1, 0.4, 0.5, 1, 
0.1, 0.4, 0.5, 1,
									] );
	
	var a_colors_buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, a_colors_buffer);
    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
    gl.vertexAttribPointer(a_colors_location, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_colors_location);									
	
	var indices = new Uint8Array([
 // front
    0, 1, 2,  3, 4, 5,  6, 7, 8,  9, 10, 11,

    // back
    12, 13, 14,  15, 16, 17,  18, 19, 20,  21, 22, 23,

    // bottom
    24, 25, 26,  27, 28, 29,

    // right
    30, 31, 32,  33, 34, 35,

    // left
    36, 37, 38,  39, 40, 41,

    // top
    42, 43, 44,  45, 46, 47,

    // top-Left
    48, 49, 50,  51, 52, 53,

    // top-Right
    54, 55, 56,  57, 58, 59	]);
								
	var bufferInd = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInd);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
	
	
	var u_rotateY_location = gl.getUniformLocation(prog, "u_RotY");
	//var thetaY = 45;
	var rad = thetaY*Math.PI/180;
    var rotateYMatrix = new Float32Array( [Math.cos(rad),  0.0,  -Math.sin(rad),  0.0,
										   0.0,            1.0,   0.0,            0.0,
                                           Math.sin(rad),  0.0,   Math.cos(rad),  0.0,
                                      	   0.0,            0.0,   0.0,            1.0] );
	
	gl.uniformMatrix4fv(u_rotateY_location, false, rotateYMatrix);

	var u_rotateX_location = gl.getUniformLocation(prog, "u_RotX");
	//var thetaX = 45;
	var rad = thetaX*Math.PI/180;
    var rotateXMatrix = new Float32Array( [1.0,  0.0,            0.0,            0.0,
                                      	   0.0,  Math.cos(rad),  Math.sin(rad),  0.0,
                                     	   0.0, -Math.sin(rad),  Math.cos(rad),  0.0,
                                      	   0.0,  0.0,            0.0,            1.0] );
	gl.uniformMatrix4fv(u_rotateX_location, false, rotateXMatrix);
	
	
	 var scale_location = gl.getUniformLocation(prog, "u_Scale");
     gl.uniform1f(scale_location, scale);

	
	
	gl.clearColor(0.0, 1.0, 0.0, 1.0);
    gl.enable(gl.DEPTH_TEST);
    //gl.enable(gl.CULL_FACE);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	gl.drawElements(gl.TRIANGLES, 60, gl.UNSIGNED_BYTE, 0);
	
	
	}
	print();
   
	
	 document.addEventListener("keydown", function (event) {
        // Check if the pressed key is A or S
        if (event.key === "a" || event.key === "A") {
          // Rotate the hexagonal prism along the Y-axis in the negative direction
          thetaY -= 5;
          print();
        } else if (event.key === "s" || event.key === "S") {
          // Rotate the hexagonal prism along the Y-axis in the positive direction
          thetaY += 5;
          print();
        }
		
		else if (event.key === "w" || event.key === "W") {
          // Rotate the hexagonal prism along the Y-axis in the negative direction
          thetaX -= 5;
          print();
        } else if (event.key === "z" || event.key === "Z") {
          // Rotate the hexagonal prism along the Y-axis in the positive direction
          thetaX += 5;
          print();
        }
		else if (event.key === "+") {
          // Scale up the hexagonal prism
          scale += 0.1;
          print();
        } else if (event.key === "-") {
          // Scale down the hexagonal prism (ensure it doesn't go below a certain threshold)
          scale = Math.max(0.1, scale - 0.1);
          print();
        }
      });

</script>



</html>